apply plugin: 'com.android.application'
//应用ShareSDK
apply plugin: 'com.mob.sdk'

android {
    //编译版本
    compileSdkVersion rootProject.ext.compileSdkVersion
    //默认配置
    defaultConfig {
        //应用唯一标志
        //这里用老师的的应用，改包名 和applicationId ,否则第三方登录不上去（原来的后面加old）
        applicationId "com.ixuea.courses.mymusic"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //开启MultiDex
        multiDexEnabled true

        //渠道相关
        flavorDimensions "versionCode"
    }

    //配置了签名后，是debug release中的签名都是一样，所以更加方面，
    // 直接复制模拟器的签名就行了，可以不用在手机上运行找签名
    // 生成到模拟器的apk放到这个目录下...app\build\outputs\apk\dev\debug

    //签名配置
    //要写到使用签名配置的前面
    signingConfigs {
        //以下两个版本都用的是同一个
        //真实项目中可能会用多个
        debug {
            //签名文件路径
            //根目录config/key.jks
            //. :一个点表示当前目录，..:2个点表示当前目录的上一级目录
            //这类的当前目录是build.gradle所在的目录app包中，上一级目录就项目根目录
            //
            storeFile file('../config/ixuea_courses.jks')
            //key密码
            storePassword "8J7rHtXNNjhD9aD"

            //别名
            keyAlias "a1"

            //签名密码
            keyPassword "ehXs7fRAK6m82z4"
        }

        //正式版配置
        release {
            storeFile file('../config/ixuea_courses.jks')
            storePassword "8J7rHtXNNjhD9aD"
            keyAlias "a1"
            keyPassword "ehXs7fRAK6m82z4"
        }
    }


    buildTypes {
        debug {
            //混淆：也就是我们这个项目，打包完成以后，有一些资源，可能我们用不到；如果这里设置true，
            // 就会把用不到的给去除，而且还会混淆一些资源文件，混淆java代码，防止反编译，同时也能减少一些体积
            //但是我们就不再讲解，因为开启以后也会把一些重要的类，给混淆了，会出问题
            //在真实项目中最好把它开启
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            //使用签名配置 signingConfigs 是上面定义的那个
            signingConfig signingConfigs.debug
        }

        //正式版本
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            //使用签名配置
            signingConfig signingConfigs.release
        }
    }

    //配置不同的环境
    productFlavors {
        //开发环境
        dev {
            //API端点
            //注意：这里是可以单引号的（也可以双引号），而java语言是不能这样用的（java单引号只能一个字符）
            //'"http://api-courses-misuc.ixuea.com/"':单引号里面有个双引号，
            //包含双引号的才是他到的值，"http://api-courses-misuc.ixuea.com/"
            buildConfigField('String', "ENDPOINT", '"http://dev-my-cloud-music-api-rails.ixuea.com/"')

            //资源端点（这个是图片资源地址的前缀（是阿里云那边的地址））
            buildConfigField 'String', 'RESOURCE_ENDPOINT', '"http://dev-courses-misuc.ixuea.com/%s"'
            dimension = minSdkVersion
        }

        //正式环境
        prod {
            //API端点
            //buildConfigField:方法  后面省略了括号
            buildConfigField 'String', 'ENDPOINT', '"http://api-courses-misuc.ixuea.com/"'

            //资源端点（这个是图片资源地址的前缀（是阿里云那边的地址））
            //正式版的这个前缀，我们这里是没有的，这里只是暂时填写上，所以用的时候用上面dev的那个（开发版的那个）
            buildConfigField 'String', 'RESOURCE_ENDPOINT', '"http://courses-misuc.ixuea.com/%s"'

            //minSdkVersion()  这里省略了(),原本是一个方法
            dimension = minSdkVersion
        }
    }

    //将源码兼容版本设置为Java 8（原来默认的是1.7）
    //因为Butterknife需要Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//sharesdk配置
//真实项目只需要配置用到的平台
//我们这里全写这里目的是方便大家参考
MobSDK {
//    appKey "260604a3dbbea"
//    appSecret "970ca36614ea0aabe7ee0c8defb690f4"

    // 自己的
    appKey "2dcacbb1827c9"
    appSecret "ddf064aa3f9962e904ea4e06b83a36be"

    //第三方平台配置
    ShareSDK {
        devInfo {
            //appId  appKey都是QQ互联那边创建应用有的
            QQ {
                id 7
                sortId 7
                appId "101481482"
                appKey "b4304961e7299dde6b7b6964bfbb4a7f"
                shareByAppClient true
                bypassApproval false
                enable true
            }

            SinaWeibo {
                id 1
                sortId 1
                appKey "1638318172"
                appSecret "5e265999bb4eb7c3c1eed34d658e0b0e"
                callbackUri "http://www.ixuea.com"
                shareByAppClient true
                enable true
            }

            TencentWeibo {
                id 2
                sortId 2
                appKey "801307650"
                appSecret "ae36f4ee3946e1cbb98d6965b0b2ff5c"
                callbackUri "http://sharesdk.cn"
                enable true
            }

            QZone {
                id 3
                sortId 3
                appId "100371282"
                appKey "aed9b0303e3ed1e27bae87c33761161d"
                shareByAppClient true
                bypassApproval false
                enable true
            }

            /* Wechat微信和WechatMoments微信朋友圈的appid是一样的；
              注意：开发者不能用我们这两个平台的appid,否则分享不了
              微信测试的时候，微信测试需要先签名打包出apk,
              sample测试微信，要先签名打包，keystore在sample项目中，密码123456
              BypassApproval是绕过审核的标记，设置为true后AppId将被忽略，故不经过
              审核的应用也可以执行分享，但是仅限于分享文字和图片，不能分享其他类型，
              默认值为false。此外，微信收藏不支持此字段。wx4868b35061f87885
              要分享微信小应用程序时用userName,path
            */
            Wechat {
                id 4
                sortId 4
                appId "wx4868b35061f87885"
                appSecret "64020361b8ec4c99936c0e3999a9f249"
                userName "gh_afb25ac019c9"
                path "pages/index/index.html?id=1"
                bypassApproval false
                enable true
            }

            WechatMoments {
                id 5
                sortId 5
                appId "wx4868b35061f87885"
                appSecret "64020361b8ec4c99936c0e3999a9f249"
                bypassApproval false
                enable true
            }

            WechatFavorite {
                id 6
                sortId 6
                appId "wx4868b35061f87885"
                appSecret "64020361b8ec4c99936c0e3999a9f249"
                bypassApproval false
                enable true
            }


            Facebook {
                id 8
                sortId 8
                appKey "1412473428822331"
                appSecret "a42f4f3f867dc947b9ed6020c2e93558"
                callbackUri "https://mob.com"
                shareByAppClient true
                enable true
            }

            Twitter {
                id 9
                sortId 9
                appKey "LRBM0H75rWrU9gNHvlEAA2aOy"
                appSecret "gbeWsZvA9ELJSdoBzJ5oLKX0TU09UOwrzdGfo9Tg7DjyGuMe8G"
                callbackUri "http://mob.com"
                enable true
            }

            Renren {
                id 10
                sortId 10
                appId "226427"
                appKey "fc5b8aed373c4c27a05b712acba0f8c3"
                appSecret "f29df781abdd4f49beca5a2194676ca4"
                enable true
            }

            KaiXin {
                id 11
                sortId 11
                appKey "358443394194887cee81ff5890870c7c"
                appSecret "da32179d859c016169f66d90b6db2a23"
                callbackUri "http://www.sharesdk.cn"
                enable true
            }

            Email {
                id 12
                sortId 12
                enable true
            }

            ShortMessage {
                id 13
                sortId 13
                enable true
            }

            Douban {
                id 16
                sortId 16
                appKey "031a96a3aa8b28af094fc3eaffa17a0d"
                appSecret "2e675e730571b75d"
                callbackUri "http://mob.com"
                enable true
            }

            YouDao {
                id 17
                sortId 17
                hostType "product"
                appKey "dcde25dca105bcc36884ed4534dab940"
                appSecret "d98217b4020e7f1874263795f44838fe"
                callbackUri "http://www.sharesdk.cn/"
                enable true
            }

            /*在中国大陆，印象笔记有两个服务器，一个是沙箱（sandbox），一个是生产服务器（china）。
            一般你注册应用，它会先让你使用sandbox，当你完成测试以后，可以到
            http://dev.yinxiang.com/support/上激活你的ConsumerKey，激活成功后，修改HostType
            为china就好了。至于如果您申请的是国际版的印象笔记（Evernote），则其生产服务器类型为
            “product”。
            如果目标设备上已经安装了印象笔记客户端，ShareSDK允许应用调用本地API来完成分享，但
            是需要将应用信息中的“ShareByAppClient”设置为true，此字段默认值为false。*/
            Evernote {
                id 19
                sortId 19
                hostType "sandbox"
                appKey "sharesdk-7807"
                appSecret "d05bf86993836004"
                shareByAppClient true
                enable true
            }

            LinkedIn {
                id 20
                sortId 20
                appKey "ejo5ibkye3vo"
                appSecret "cC7B2jpxITqPLZ5M"
                callbackUri "http://sharesdk.cn"
                shareByAppClient true
                enable true
            }

            GooglePlus {
                id 21
                sortId 21
                appId "236300675100-am5pm8km7md1memjevq8rl9pg5c4s4b8.apps.googleusercontent.com"
                callbackUri "http://localhost"
                shareByAppClient true
                enable true
            }

            FourSquare {
                id 22
                sortId 22
                appId "G0ZI20FM30SJAJTX2RIBGD05QV1NE2KVIM2SPXML2XUJNXEU"
                appSecret "3XHQNSMMHIFBYOLWEPONNV4DOTCDBQH0AEMVGCBG0MZ32XNU"
                callbackUri "http://www.sharesdk.cn"
                enable true
            }

            Pinterest {
                id 23
                sortId 23
                appId "1432928"
                enable true
            }

            Flickr {
                id 24
                sortId 24
                appKey "33d833ee6b6fca49943363282dd313dd"
                appSecret "3a2c5b42a8fbb8bb"
                callbackUri "http://www.sharesdk.cn"
                enable true
            }

            Tumblr {
                id 25
                sortId 25
                appKey "2QUXqO9fcgGdtGG1FcvML6ZunIQzAEL8xY6hIaxdJnDti2DYwM"
                appSecret "3Rt0sPFj7u2g39mEVB3IBpOzKnM3JnTtxX2bao2JKk4VV1gtNo"
                callbackUri "http://www.sharesdk.cn"
                enable true
            }

            Dropbox {
                id 26
                sortId 26
                appKey "i5vw2mex1zcgjcj"
                appSecret "3i9xifsgb4omr0s"
                callbackUri "https://www.sharesdk.cn"
                enable true
            }

            VKontakte {
                id 27
                sortId 27
                appId "3921561"
                enable true
            }


            Instagram {
                id 28
                sortId 28
                appId "ff68e3216b4f4f989121aa1c2962d058"
                appSecret "1b2e82f110264869b3505c3fe34e31a1"
                callbackUri "http://sharesdk.cn"
                enable true
            }

            /*Yixin易信和YixinMoments易信朋友圈的appid是一样的；
            注意：开发者不能用我们这两个平台的appid,否则分享不了
            易信测试的时候需要先签名打包出apk,
            sample测试易信，要先签名打包，keystore在sample项目中，密码123456
            BypassApproval是绕过审核的标记，设置为true后AppId将被忽略，故不经过
            审核的应用也可以执行分享，但是仅限于分享文字或图片，不能分享其他类型，
            默认值为false。*/
            Yixin {
                id 29
                sortId 29
                appId "yx0d9a9f9088ea44d78680f3274da1765f"
                bypassApproval false
                enable true
            }

            YixinMoments {
                id 30
                sortId 30
                appId "yx0d9a9f9088ea44d78680f3274da1765f"
                bypassApproval false
                enable true
            }

            Mingdao {
                id 31
                sortId 31
                appKey "EEEE9578D1D431D3215D8C21BF5357E3"
                appSecret "5EDE59F37B3EFA8F65EEFB9976A4E933"
                callbackUri "http://sharesdk.cn"
                enable true
            }

            Line {
                id 32
                sortId 32
                appId "1477692153"
                appSecret "f30c036370f2e04ade71c52eef73a9af"
                enable true
            }

            KakaoTalk {
                id 33
                sortId 33
                appKey "48d3f524e4a636b08d81b3ceb50f1003"
                enable true
            }

            KakaoStory {
                id 34
                sortId 34
                appKey "48d3f524e4a636b08d81b3ceb50f1003"
                enable true
            }

            WhatsApp {
                id 35
                sortId 35
                enable true
            }


            Pocket {
                id 37
                sortId 37
                appKey "32741-389c565043c49947ba7edf05"
                enable true
            }

            Instapaper {
                id 38
                sortId 38
                appKey "4rDJORmcOcSAZL1YpqGHRI605xUvrLbOhkJ07yO0wWrYrc61FA"
                appSecret "GNr1GespOQbrm8nvd7rlUsyRQsIo3boIbMguAl9gfpdL0aKZWe"
                enable true
            }

            FacebookMessenger {
                id 39
                sortId 39
                appId "107704292745179"
                enable true
            }


            Alipay {
                id 50
                sortId 50
                appId "2015072400185895"
                enable true
            }

            AlipayMoments {
                id 51
                sortId 51
                appId "2015072400185895"
                enable true
            }

            Dingding {
                id 52
                sortId 52
                appId "dingoanxyrpiscaovl4qlw"
                bypassApproval false
                enable true
            }

            Youtube {
                id 53
                sortId 53
                appId "370141748022-bicrnsjfiije93bvdt63dh3728m4shas.apps.googleusercontent.com"
                appSecret "AIzaSyAO06g-0TDpHcsXXO918a7QE3Zdct2bB5E"
                callbackUri "http://localhost"
                shareByAppClient true
                enable true
            }

            Meipai {
                id 54
                sortId 54
                appId "1089867596"
                appSecret "y9ym6rrjjijtkt23qtsc"
                shareByAppClient true
                enable true
            }

            Meipai {
                id 54
                sortId 54
                appId "1089867596"
                appSecret "y9ym6rrjjijtkt23qtsc"
                shareByAppClient true
                enable true
            }

        }
    }
}

dependencies {
    //添加libs目录里面的jar
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //添加appcompat（这个是google 兼容包 可以在低版本的手机，享受高版本SDK的功能，基本上都要引用这个包，因为系统的兼容性太差了）
    implementation 'androidx.appcompat:appcompat:1.1.0'

    //material design依赖
    //AppBarLayout在这里面
    implementation 'com.google.android.material:material:1.0.0'

    //那个DrawerLayout （在appcompat和material包其中 记得这2个依赖库记得要添加上）

    //引入约束控件constraintlayout依赖 （）注意：这里引入的是aar格式（可能包含资源），并不是jar包
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    //圆形指示器
    //https://github.com/ongakuer/CircleIndicator
    implementation 'me.relex:circleindicator:2.1.4'

    //提供通过注解的方式找控件
    //绑定方法
    //https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    //apache common lang3工具包
    //提供了StringUtils等这样的类
    //http://commons.apache.org/proper/commons-lang/
    implementation 'org.apache.commons:commons-lang3:3.9'

    //toast工具类
    //https://github.com/GrenderG/Toasty
    implementation 'com.github.GrenderG:Toasty:1.4.2'

    //MultiDex
    implementation "androidx.multidex:multidex:2.0.0"

    //请求网络相关
    //okhttp
    //https://github.com/square/okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.2.0'

    //用来打印okhttp请求日志
    //当然也可以自定义
    implementation("com.squareup.okhttp3:logging-interceptor:4.2.0")

    //retrofit
    //https://github.com/square/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'

    //使用gson解析json
    //https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.5'

    //适配retrofit使用gson解析
    //版本要和retrofit一样
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'

    //适配retrofit支持rxjava
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'
    /**
     * 注意:retrofit gson adapter-rxjava2 的版本号一样，防止出错
     */

    //使用了Android响应式编程
    //RxJava和RxAndroid区别？
    //简单来说：就是RxAndroid在RxJava的基础上
    //优化了一些功能
    //增强了Android特有的功能
    //https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //end 请求网络相关

    //通过OkHttp的拦截器机制
    //实现在Chrome中抓包
    //https://github.com/facebook/stetho
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    //通过OkHttp的拦截器机制
    //实现在应用内显示网络请求功能
    //https://github.com/ChuckerTeam/chucker
    //(所以我们希望有一个工具，集成到客户端里面的，其他人员能直接在手机上查看网络请求，
    // 这样可以使用Chucker，他也是基于OkHttp拦截器来实现的;)
    //debug:调试的时候才添加上，可以理解下面release那个依赖没有添加，理解为空实现
    debugImplementation "com.github.ChuckerTeam.Chucker:library:3.0.1"
    releaseImplementation "com.github.ChuckerTeam.Chucker:library-no-op:3.0.1"

    //跨界面通信框架
    //https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //图片加载框架
    //https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'

    //指示器（用于ViewPager）
    //https://github.com/hackware1993/MagicIndicator
    implementation 'com.github.hackware1993:MagicIndicator:1.6.0'

    //recyclerview控件
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha03'

    //封装了RecyclerView
    //提供更高层次的接口
    //https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'

    //轮播图（这里用了控件，自己写起来有点复杂，需要理解ViewPager的一些逻辑才行）
    //https://github.com/youth5201314/banner
    implementation 'com.youth.banner:banner:1.4.10'

    //内存泄漏检测工具
    //https://github.com/square/leakcanary
    //只有调试模式下才添加该依赖
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-2'

    //java测试依赖
//    implementation 'androidx.legacy:legacy-support-v4:1.0.0'//这段不知道哪里生产的，所以去掉这段
    testImplementation 'junit:junit:4.12'

    //Android测试依赖
    //第一个下面已经有了，所以注释掉
//    androidTestImplementation "androidx.test.ext:junit:1.1.0"
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'

    //android测试依赖
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
